/*======================================================================*/
/* Macro definitions that facilitate the generation of source code for  */
/* namelist-group input from namelist input files                       */
/*======================================================================*/
/*                                                                      */
/* READ_NML_REF(NUMNAM,NAM) : generates a source-code line for reading  */
/* input for namelist-group NAM from unit NUMNAM_ref with error         */
/* handling (stops on encountering misspelled entries, warns about      */
/* missing namelist-group records)                                      */
/*                                                                      */
/* READ_NML_CFG(NUMNAM,NAM) : generates a source-code line for reading  */
/* input for namelist-group NAM from unit NUMNAM_cfg with error         */
/* handling (stops on encountering misspelled entries, ignores missing  */
/* namelist-group records)                                              */
/*                                                                      */
/* READ_NML_(NUMNAM,NAM) : generates a source-code line for reading     */
/* input for namelist-group NAM from unit NUMNAM with error handling    */
/* (stops on encountering misspelled entries, warns about or ignores    */
/* missing namelist-group records depending on whether WARN is .TRUE.   */
/* or .FALSE., respectively)                                            */
/*                                                                      */
/* These substitutions require a variable of name ios and type INTEGER  */
/* to be available and include a call of subroutine ctl_nam (available  */
/* from module lib_mpp)                                                 */
/*                                                                      */
/* Some compilers seem not to support access to namelist-group records  */
/* that are stored behind the first record in internal files (see NEMO  */
/* issue #278, https://forge.nemo-ocean.eu/nemo/nemo/-/issues/278);     */
/* here, if 'key_nomultnlg' is defined (e.g., via preprocessor option   */
/* '-Dkey_nomultnlg' in an architecture configuration file), the        */
/* substitutions below ensure that internal files are subset to start   */
/* at the beginning of the requested namelist-group record if such      */
/* record exists                                                        */
/*                                                                      */
/*----------------------------------------------------------------------*/
/* NEMO/OCE 4.3 , NEMO Consortium (2023)                                */
/* Software governed by the CeCILL license (see ./LICENSE)              */
/*----------------------------------------------------------------------*/
/*                                                                      */
/* For now, 'key_nomultnlg' is defined here to ensure good compiler     */
/* compatibility; this blanket setting is planned to be removed         */
/* together with a planned widening of the range of compilers           */
/* detectable by script 'arch/build_arch-auto.sh' and the selective     */
/* definition of this key in architecture files generated by this       */
/* script                                                               */
#undef key_nomultnlg
/*                                                                      */
#if defined key_nomultnlg
#    define READ_NML_(NUMNAM,NLTYPE,NAM,WARN)REWIND(NUMNAM);READ(NUMNAM(MAX(INDEX(NUMNAM,"&NAM"),1):),NAM,IOSTAT=ios);CALL ctl_nam(ios,"NAM (NLTYPE)",WARN)
#else
#    define READ_NML_(NUMNAM,NLTYPE,NAM,WARN)REWIND(NUMNAM);READ(NUMNAM,NAM,IOSTAT=ios);CALL ctl_nam(ios,"NAM (NLTYPE)",WARN)
#endif
#define READ_NML_REF(NUMNAM,NAM)READ_NML_(NUMNAM/**/_ref,ref,NAM,.TRUE.)
#define READ_NML_CFG(NUMNAM,NAM)READ_NML_(NUMNAM/**/_cfg,cfg,NAM,.FALSE.)
