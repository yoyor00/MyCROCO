# ci croco
# check this file with: https://gitlab.inria.fr/ci/lint

stages:
  - download
  - run

variables:
  TERM: "xterm-256color"
  CVTKHOME: "$CI_PROJECT_DIR/CVTK/test_repro"
  PERFRSTHOME: "$CI_PROJECT_DIR/CVTK/test_perfrst"
  #
  DATADIR: "$CI_PROJECT_DIR/.datadir"
  PERFRSTDIR: "$CI_PROJECT_DIR/.perfrstdir"
  #
  CVTKWORK: "$CI_PROJECT_DIR/.datawork"
  PERFRSTWORK: "$CI_PROJECT_DIR/.perfrstwork"
  #CROCO_CI_MPIRUN: "mpirun.openmpi"
  #
  #CI_FC: "gfortran"
  #CI_MPIF90: "mpif90"
  CI_CROCO_PWD: $(pwd)
  SOURCE_CROCO: "$CI_PROJECT_DIR/OCEAN"
  TESTROOTDIR: ${CVTKWORK}
  #
  # Here define the direcory with the input files
  # => for BENGUELA_VHR
  nest_position_reg: "79 137 37 117 3 3 3 3"
  # => for VORTEX if needed
  DATAVOR: ""
  nest_position_vort: ""
  # => for ANA if needed
  DATAANA: ""


# download_latest:
#   stage: download
#   tags:
#     - ci.inria.fr
#   image : registry.gitlab.inria.fr/croco-ocean/croco_docker/ubuntu_gfortran_parallel:1.0.0
#   script:
#     - cd $CVTKHOME
#     - mkdir -p latest
#     - cd latest
#     - 'curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.inria.fr/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_COMMIT_BRANCH/download?job=ana_run" --output artifacts_ana_run.zip'
#   artifacts:
#     paths:
#       - $CVTKHOME/latest
#     when: always
#     expire_in: 6 hour

reg_run_intel:
  stage: run
  tags:
    - croco-vm-docker
  image : ubuntu_intel_parallel:0.0.1
  variables:
    CI_FC: "ifort"
    CI_MPIF90: "mpiifort"
    CROCO_CI_MPIRUN: "mpirun"
    DATAREG: "$CI_PROJECT_DIR/CVTK/VHR"
  before_script:
    - mkdir -p $DATAREG
    - cd $DATAREG
    - 'curl --location "https://data-croco.ifremer.fr/ForCI-INRIA.tar.gz" --output ForCI-INRIA.tar.gz'
    - tar -xf ForCI-INRIA.tar.gz
    - mv ForCI-INRIA/VHR_CROCO_FILES_BCK/* .
    - mkdir -p $DATADIR
    - mkdir -p $CVTKWORK
    - cd $DATADIR
    - mkdir -p TESTROOT/REG
    - cd -
  script:
    - cd $CVTKHOME/Scripts_reg
    - ./create_link_master_reg.sh
    - cd -
    - cd $CVTKWORK/REG
    
    - ./mk_TESTALL.bash CONFIGURE_REG reg
    - ./gather_recap.bash REG > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Compilation failure" REG_gather_recap_*_git*' > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Execution failure" REG_gather_recap_*_git*' > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Parallel reproducibility failed" REG_gather_recap_*_git*' > /dev/null 2>&1
 
  artifacts:
    paths:
      - $CVTKWORK/ftp
      - $CVTKWORK/REG/*/*.log
    when: always 

ana_run_intel:
  stage: run
  only:
    - schedules
  before_script:
    - mkdir -p $DATADIR
    - mkdir -p $CVTKWORK
    - cd $DATADIR
    - mkdir -p TESTROOT/KTEST
    - cd -
  tags:
    - croco-vm-docker
  image : ubuntu_intel_parallel:0.0.1
  variables:
    CI_FC: "ifort"
    CI_MPIF90: "mpiifort"
    CROCO_CI_MPIRUN: "mpirun"
  script:
    - cd $CVTKHOME/Scripts_ana
    - ./create_link_master_ana.sh
    - cd -
    - cd $CVTKWORK/KTEST
   
    - ./mk_TESTALL.bash CONFIGURE_ANA ana
    - ./gather_recap.bash KTEST > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Compilation failure" KTEST_gather_recap_*_git*' > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Execution failure" KTEST_gather_recap_*_git*' > /dev/null 2>&1
    - /bin/sh -c '! grep -i "Parallel reproducibility failed" KTEST_gather_recap_*_git*' > /dev/null 2>&1  
  artifacts:
    paths:
      - $CVTKWORK/ftp
      - $CVTKWORK/KTEST/*/*.log
    when: always



